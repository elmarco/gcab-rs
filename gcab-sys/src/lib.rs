// This file was generated by gir (https://github.com/gtk-rs/gir @ 461bb81+)
// from gir-files (https://github.com/gtk-rs/gir-files @ ???)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal)]

extern crate libc;
extern crate gio_sys as gio;
extern crate glib_sys as glib;
extern crate gobject_sys as gobject;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type GCabCompression = c_int;
pub const GCAB_COMPRESSION_NONE: GCabCompression = 0;
pub const GCAB_COMPRESSION_MSZIP: GCabCompression = 1;
pub const GCAB_COMPRESSION_QUANTUM: GCabCompression = 2;
pub const GCAB_COMPRESSION_LZX: GCabCompression = 3;
pub const GCAB_COMPRESSION_MASK: GCabCompression = 15;

pub type GCabError = c_int;
pub const GCAB_ERROR_FORMAT: GCabError = 0;
pub const GCAB_ERROR_FAILED: GCabError = 1;
pub const GCAB_ERROR_NOT_SUPPORTED: GCabError = 2;
pub const GCAB_ERROR_INVALID_DATA: GCabError = 3;

pub type GCabFileAttribute = c_int;
pub const GCAB_FILE_ATTRIBUTE_RDONLY: GCabFileAttribute = 1;
pub const GCAB_FILE_ATTRIBUTE_HIDDEN: GCabFileAttribute = 2;
pub const GCAB_FILE_ATTRIBUTE_SYSTEM: GCabFileAttribute = 4;
pub const GCAB_FILE_ATTRIBUTE_ARCH: GCabFileAttribute = 32;
pub const GCAB_FILE_ATTRIBUTE_EXEC: GCabFileAttribute = 64;
pub const GCAB_FILE_ATTRIBUTE_NAME_IS_UTF: GCabFileAttribute = 128;

// Callbacks
pub type GCabFileCallback = Option<unsafe extern "C" fn(*mut GCabFile, gpointer) -> gboolean>;

// Records
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GCabCabinetClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GCabCabinetClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GCabCabinetClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GCabFileClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GCabFileClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GCabFileClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct GCabFolderClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GCabFolderClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GCabFolderClass @ {:?}", self as *const _))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

// Classes
#[repr(C)]
pub struct GCabCabinet(c_void);

impl ::std::fmt::Debug for GCabCabinet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GCabCabinet @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct GCabFile(c_void);

impl ::std::fmt::Debug for GCabFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GCabFile @ {:?}", self as *const _))
         .finish()
    }
}

#[repr(C)]
pub struct GCabFolder(c_void);

impl ::std::fmt::Debug for GCabFolder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GCabFolder @ {:?}", self as *const _))
         .finish()
    }
}

extern "C" {

    //=========================================================================
    // GCabCompression
    //=========================================================================
    pub fn gcab_compression_get_type() -> GType;

    //=========================================================================
    // GCabFileAttribute
    //=========================================================================
    pub fn gcab_file_attribute_get_type() -> GType;

    //=========================================================================
    // GCabCabinet
    //=========================================================================
    pub fn gcab_cabinet_get_type() -> GType;
    pub fn gcab_cabinet_new() -> *mut GCabCabinet;
    pub fn gcab_cabinet_add_folder(cabinet: *mut GCabCabinet, folder: *mut GCabFolder, error: *mut *mut glib::GError) -> gboolean;
    pub fn gcab_cabinet_extract(cabinet: *mut GCabCabinet, path: *mut gio::GFile, file_callback: GCabFileCallback, progress_callback: gio::GFileProgressCallback, user_data: gpointer, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> gboolean;
    pub fn gcab_cabinet_extract_simple(cabinet: *mut GCabCabinet, path: *mut gio::GFile, file_callback: GCabFileCallback, user_data: gpointer, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> gboolean;
    pub fn gcab_cabinet_get_folders(cabinet: *mut GCabCabinet) -> *mut glib::GPtrArray;
    pub fn gcab_cabinet_get_signature(cabinet: *mut GCabCabinet, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *const glib::GByteArray;
    pub fn gcab_cabinet_get_size(cabinet: *mut GCabCabinet) -> u32;
    pub fn gcab_cabinet_load(cabinet: *mut GCabCabinet, stream: *mut gio::GInputStream, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> gboolean;
    pub fn gcab_cabinet_write(cabinet: *mut GCabCabinet, stream: *mut gio::GOutputStream, file_callback: GCabFileCallback, progress_callback: gio::GFileProgressCallback, user_data: gpointer, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> gboolean;
    pub fn gcab_cabinet_write_simple(cabinet: *mut GCabCabinet, stream: *mut gio::GOutputStream, file_callback: GCabFileCallback, user_data: gpointer, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // GCabFile
    //=========================================================================
    pub fn gcab_file_get_type() -> GType;
    pub fn gcab_file_new_with_bytes(name: *const c_char, bytes: *mut glib::GBytes) -> *mut GCabFile;
    pub fn gcab_file_new_with_file(name: *const c_char, file: *mut gio::GFile) -> *mut GCabFile;
    pub fn gcab_file_get_attributes(file: *mut GCabFile) -> u32;
    pub fn gcab_file_get_bytes(file: *mut GCabFile) -> *mut glib::GBytes;
    pub fn gcab_file_get_date(file: *mut GCabFile, result: *mut glib::GTimeVal) -> gboolean;
    pub fn gcab_file_get_extract_name(file: *mut GCabFile) -> *const c_char;
    pub fn gcab_file_get_file(file: *mut GCabFile) -> *mut gio::GFile;
    pub fn gcab_file_get_name(file: *mut GCabFile) -> *const c_char;
    pub fn gcab_file_get_size(file: *mut GCabFile) -> u32;
    pub fn gcab_file_set_attributes(file: *mut GCabFile, attr: u32);
    pub fn gcab_file_set_date(file: *mut GCabFile, tv: *const glib::GTimeVal);
    pub fn gcab_file_set_extract_name(file: *mut GCabFile, name: *const c_char);

    //=========================================================================
    // GCabFolder
    //=========================================================================
    pub fn gcab_folder_get_type() -> GType;
    pub fn gcab_folder_new(comptype: c_int) -> *mut GCabFolder;
    pub fn gcab_folder_add_file(cabfolder: *mut GCabFolder, cabfile: *mut GCabFile, recurse: gboolean, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> gboolean;
    pub fn gcab_folder_get_comptype(cabfolder: *mut GCabFolder) -> c_int;
    pub fn gcab_folder_get_file_by_name(cabfolder: *mut GCabFolder, name: *const c_char) -> *mut GCabFile;
    pub fn gcab_folder_get_files(cabfolder: *mut GCabFolder) -> *mut glib::GSList;
    pub fn gcab_folder_get_nfiles(cabfolder: *mut GCabFolder) -> c_uint;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn gcab_error_quark() -> glib::GQuark;

}
